// services/aiService.js - Simple Fixed Version
class AIService {
  constructor() {
    this.provider = import.meta.env.VITE_AI_PROVIDER || 'mock';
    this.debug = import.meta.env.VITE_DEBUG_AI === 'true';
    this.ollamaUrl = import.meta.env.VITE_OLLAMA_URL || 'http://localhost:11434';
    this.ollamaModel = import.meta.env.VITE_OLLAMA_MODEL || 'qwen3:0.6b';
    this.timeout = 30000;
    this.isAvailable = null;
    
    if (this.debug) {
      console.log('[AI Service] Initialized with provider:', this.provider);
    }
  }

  async checkAvailability() {
    if (this.provider === 'mock') {
      return { available: true, provider: 'mock' };
    }

    if (this.provider === 'local') {
      try {
        const response = await fetch(`${this.ollamaUrl}/api/tags`, {
          method: 'GET',
          signal: AbortSignal.timeout(5000)
        });
        
        if (response.ok) {
          const data = await response.json();
          const hasModel = data.models?.some(model => 
            model.name.includes(this.ollamaModel.split(':')[0])
          );
          return { available: hasModel, provider: 'ollama', models: data.models || [] };
        }
        return { available: false, error: `HTTP ${response.status}` };
      } catch (error) {
        return { available: false, error: error.message };
      }
    }

    return { available: false, error: 'Unknown provider' };
  }

  async generateResponse(userMessage, context = {}) {
    if (this.debug) {
      console.log('[AI Service] Generating response for:', userMessage.substring(0, 50) + '...');
    }

    try {
      if (this.provider === 'local') {
        return await this.generateOllamaResponse(userMessage, context);
      }
      
      // Fallback to mock for all other providers
      return this.getMockResponse(userMessage, context);
    } catch (error) {
      console.error('[AI Service] Error:', error);
      return this.getMockResponse(userMessage, context);
    }
  }

  async generateOllamaResponse(userMessage, context) {
    const prompt = this.buildPrompt(userMessage, context);
    
    try {
      const response = await fetch(`${this.ollamaUrl}/api/generate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: this.ollamaModel,
          prompt: prompt,
          stream: false,
          options: {
            temperature: 0.7,
            num_predict: 500
          }
        }),
        signal: AbortSignal.timeout(this.timeout)
      });

      if (!response.ok) {
        throw new Error(`Ollama API Error: ${response.status}`);
      }

      const data = await response.json();
      return this.processResponse(data.response);
    } catch (error) {
      console.warn('[AI Service] Ollama failed, using mock response');
      return this.getMockResponse(userMessage, context);
    }
  }

  buildPrompt(userMessage, context) {
    const { stats = {} } = context;
    
    return `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Access Log

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.totalAccess || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${stats.successfulAccess || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á  
- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: ${stats.deniedAccess || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
- ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥: ${stats.uniqueUsers || 0} ‡∏Ñ‡∏ô

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ${userMessage}

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:`;
  }

  processResponse(rawResponse) {
    if (!rawResponse) return '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ';
    
    let response = rawResponse.trim();
    response = response.replace(/^(‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:|‡∏ï‡∏≠‡∏ö:|Response:)/i, '').trim();
    
    return response;
  }

  getMockResponse(userMessage, context) {
    const { stats = {} } = context;
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes('‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥') || lowerMessage.includes('‡∏™‡∏£‡∏∏‡∏õ')) {
      return this.generateStatsResponse(stats);
    }
    
    if (lowerMessage.includes('‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò') || lowerMessage.includes('denied')) {
      return this.generateDeniedResponse(stats);
    }
    
    if (lowerMessage.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢') || lowerMessage.includes('security')) {
      return this.generateSecurityResponse(stats);
    }

    return this.generateDefaultResponse(userMessage, stats);
  }

  generateStatsResponse(stats) {
    const successRate = stats.totalAccess > 0 ? 
      ((stats.successfulAccess / stats.totalAccess) * 100).toFixed(1) : 0;
    const deniedRate = stats.totalAccess > 0 ? 
      ((stats.deniedAccess / stats.totalAccess) * 100).toFixed(1) : 0;

    return `üìä **‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö**

üî¢ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°:**
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.totalAccess || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${stats.successfulAccess || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${successRate}%)
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: ${stats.deniedAccess || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${deniedRate}%)
‚Ä¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥: ${stats.uniqueUsers || 0} ‡∏Ñ‡∏ô

üìà **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:** ${this.getSystemStatus(stats)}

üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥`;
  }

  generateDeniedResponse(stats) {
    const deniedRate = stats.totalAccess > 0 ? 
      ((stats.deniedAccess / stats.totalAccess) * 100).toFixed(1) : 0;

    return `üîí **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò**

üìä **‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:**
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: ${stats.deniedAccess || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: ${deniedRate}%

üîç **‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:**
‚Ä¢ ‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
‚Ä¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß
‚Ä¢ ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î

üí° **‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:** ${this.getDeniedRecommendation(deniedRate)}`;
  }

  generateSecurityResponse(stats) {
    const deniedRate = stats.totalAccess > 0 ? 
      (stats.deniedAccess / stats.totalAccess) * 100 : 0;
    
    let level = 'üü¢ ‡∏î‡∏µ';
    let assessment = '‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥';
    
    if (deniedRate === 0) {
      level = 'üü¢ ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°';
      assessment = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥';
    } else if (deniedRate > 15) {
      level = 'üî¥ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á';
      assessment = '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏π‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö';
    } else if (deniedRate > 5) {
      level = 'üü° ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
      assessment = '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°';
    }

    return `üõ°Ô∏è **‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏£‡∏∞‡∏ö‡∏ö**

üéØ **‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:** ${level}
üìä **‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:** ${assessment}

üîí **‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:**
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
2. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö Real-time
3. ‡∏ó‡∏≥ Security Audit ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
4. ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Log ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥`;
  }

  generateDefaultResponse(userMessage, stats) {
    return `ü§ñ **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:** "${userMessage}"

üìä **‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:**
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.totalAccess || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${stats.successfulAccess || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: ${stats.deniedAccess || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚Ä¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥: ${stats.uniqueUsers || 0} ‡∏Ñ‡∏ô

üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

‚ùì **‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:** ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢, ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò, ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°`;
  }

  getSystemStatus(stats) {
    if (stats.totalAccess === 0) return 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    
    const successRate = (stats.successfulAccess / stats.totalAccess) * 100;
    
    if (successRate >= 95) return 'üü¢ ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°';
    if (successRate >= 90) return 'üü° ‡∏î‡∏µ';
    if (successRate >= 80) return 'üü† ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°';
    return 'üî¥ ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö';
  }

  getDeniedRecommendation(deniedRate) {
    if (deniedRate > 20) return '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πà‡∏ß‡∏ô ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å';
    if (deniedRate > 10) return '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á';
    if (deniedRate > 0) return '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥';
    return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡∏µ';
  }

  getProviderInfo() {
    return {
      provider: this.provider,
      isAvailable: this.isAvailable,
      ollamaUrl: this.ollamaUrl,
      ollamaModel: this.ollamaModel
    };
  }
}

// Export ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - ‡πÉ‡∏ä‡πâ default export
const aiService = new AIService();
export default aiService;