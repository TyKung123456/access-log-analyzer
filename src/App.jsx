// src/App.jsx - Updated with Enhanced Upload for Large Files
import React, { useState, useEffect } from 'react';
import aiService from './services/aiService.js';
import Header from './components/Layout/Header';
import NavigationTabs from './components/Layout/NavigationTabs';
import UploadPage from './components/Upload/UploadPage'; // Use existing UploadPage
import DashboardPage from './components/Dashboard/DashboardPage';
import ChatPage from './components/Chat/ChatPage';
import SecurityDashboard from './components/Security/SecurityDashboard';
import SecurityAlerts from './components/Security/SecurityAlerts';
import { useLogData } from './hooks/useLogData';
import { useFilters } from './hooks/useFilters';
import { useChat } from './hooks/useChat';
import { useUpload } from './hooks/useUpload'; // Use existing hook

const AccessLogAnalyzer = () => {
  const [activeTab, setActiveTab] = useState('upload');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [systemStatus, setSystemStatus] = useState({
    ai: 'checking',
    database: 'checking',
    upload: 'checking'
  });
  
  // Custom hooks - Enhanced for large files
  const { logData, filteredData, stats, chartData, refreshData } = useLogData();
  const { filters, handleFilterChange } = useFilters(logData);
  const { chatMessages, currentMessage, setCurrentMessage, handleSendMessage, isAnalyzing } = useChat(stats);
  const { 
    isUploading, 
    uploadProgress, 
    uploadResult, 
    uploadError, 
    handleFileUpload
  } = useUpload();

  // Additional state for enhanced features
  const [uploadStats, setUploadStats] = useState(null);
  const [validationResults, setValidationResults] = useState(null);

  // Enhanced upload properties (derived from existing hook)
  const canCancel = false; // Not implemented in original hook
  const isCompleted = !isUploading && (uploadResult !== null || uploadError !== null);
  const hasErrors = uploadError !== null;
  const hasWarnings = uploadResult?.warnings?.length > 0;
  const uploadSuccessRate = uploadResult?.statistics 
    ? ((uploadResult.statistics.validRows / uploadResult.statistics.totalRows) * 100).toFixed(1)
    : null;

  // System health check
  useEffect(() => {
    const checkSystemHealth = async () => {
      try {
        setIsLoading(true);
        
        // Check AI Service
        try {
          const aiStatus = await aiService.checkAvailability();
          setSystemStatus(prev => ({ ...prev, ai: 'connected' }));
          console.log('‚úÖ AI Service Status:', aiStatus);
        } catch (aiError) {
          setSystemStatus(prev => ({ ...prev, ai: 'disconnected' }));
          console.warn('‚ö†Ô∏è AI Service unavailable:', aiError);
        }

        // Check Database connectivity
        try {
          const response = await fetch('/api/health');
          if (response.ok) {
            setSystemStatus(prev => ({ ...prev, database: 'connected' }));
          } else {
            throw new Error(`Database health check failed: ${response.status}`);
          }
        } catch (dbError) {
          setSystemStatus(prev => ({ ...prev, database: 'disconnected' }));
          console.warn('‚ö†Ô∏è Database connectivity issue:', dbError.message);
        }

        // Check Upload service (with fallback)
        try {
          const response = await fetch('/api/upload/stats');
          if (response.ok) {
            setSystemStatus(prev => ({ ...prev, upload: 'connected' }));
          } else if (response.status === 404) {
            // Try alternative endpoint
            const altResponse = await fetch('/api/logs');
            if (altResponse.ok) {
              setSystemStatus(prev => ({ ...prev, upload: 'connected' }));
            } else {
              throw new Error('Upload service endpoints not found');
            }
          } else {
            throw new Error(`Upload service check failed: ${response.status}`);
          }
        } catch (uploadError) {
          setSystemStatus(prev => ({ ...prev, upload: 'disconnected' }));
          console.warn('‚ö†Ô∏è Upload service issue:', uploadError.message);
          
          // Don't treat this as a critical error if we're in development
          if (process.env.NODE_ENV === 'development') {
            console.info('üí° Development mode: Upload service will be available when backend starts');
          }
        }

        // Only show error if all services are down
        const connectedServices = Object.values(systemStatus).filter(status => status === 'connected').length;
        if (connectedServices === 0 && process.env.NODE_ENV !== 'development') {
          setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢');
        } else {
          setError(null);
        }

      } catch (error) {
        console.error('‚ùå System health check failed:', error);
        // Only show error in production or if it's a critical issue
        if (process.env.NODE_ENV === 'production') {
          setError('‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö');
        }
      } finally {
        setIsLoading(false);
      }
    };
    
    checkSystemHealth();
    
    // Set up periodic health checks every 5 minutes (only in production)
    let healthCheckInterval;
    if (process.env.NODE_ENV === 'production') {
      healthCheckInterval = setInterval(checkSystemHealth, 5 * 60 * 1000);
    }
    
    return () => {
      if (healthCheckInterval) {
        clearInterval(healthCheckInterval);
      }
    };
  }, []);

  // Enhanced upload success handler
  useEffect(() => {
    if (uploadResult && uploadResult.success) {
      // Update upload stats
      const stats = {
        fileName: uploadResult.fileName || 'Unknown',
        fileSize: uploadResult.fileSize || 0,
        totalRecords: uploadResult.recordCount || 0,
        validRecords: uploadResult.recordCount || 0,
        insertedRecords: uploadResult.recordCount || 0,
        processingTime: uploadResult.processingTime || 'N/A',
        success: true,
        uploadTime: new Date().toISOString()
      };
      setUploadStats(stats);
      
      // Save to localStorage for persistence
      localStorage.setItem('lastUploadStats', JSON.stringify(stats));
      
      // Refresh log data after successful upload
      setTimeout(() => {
        refreshData();
        console.log('üîÑ Refreshing data after successful upload');
      }, 1000);
    }
  }, [uploadResult, refreshData]);

  // Error boundary handler
  const handleError = (error, errorInfo) => {
    console.error('Application Error:', error, errorInfo);
    setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
  };

  // Clear error function
  const clearError = () => {
    setError(null);
  };

  // Enhanced export report including upload statistics
  const exportReport = async () => {
    try {
      setIsLoading(true);
      
      const systemInfo = `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:
- AI Service: ${systemStatus.ai === 'connected' ? '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
- Database: ${systemStatus.database === 'connected' ? '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}
- Upload Service: ${systemStatus.upload === 'connected' ? '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}`;

      const uploadInfo = uploadStats ? `
üì§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:
- ‡πÑ‡∏ü‡∏•‡πå: ${uploadStats.fileName || 'N/A'}
- ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: ${uploadStats.fileSize ? (uploadStats.fileSize / 1024 / 1024).toFixed(2) + 'MB' : 'N/A'}
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${uploadStats.totalRecords?.toLocaleString() || 'N/A'}
- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${uploadStats.validRecords?.toLocaleString() || 'N/A'}
- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß: ${uploadStats.insertedRecords?.toLocaleString() || 'N/A'}
- ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${uploadStats.processingTime || 'N/A'}
- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${uploadSuccessRate ? uploadSuccessRate + '%' : 'N/A'}
- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${uploadStats.success ? '‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}` : '\nüì§ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå';

      const report = `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Access Log ‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
========================================================

${systemInfo}

üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°:
- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.totalAccess?.toLocaleString() || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${stats.successfulAccess?.toLocaleString() || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${stats.totalAccess ? ((stats.successfulAccess/stats.totalAccess)*100).toFixed(1) : 0}%)
- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: ${stats.deniedAccess?.toLocaleString() || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${stats.totalAccess ? ((stats.deniedAccess/stats.totalAccess)*100).toFixed(1) : 0}%)
- ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥: ${stats.uniqueUsers?.toLocaleString() || 0} ‡∏Ñ‡∏ô
- ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${stats.dateRange || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

üìç ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (Top 10):
${chartData.locationData?.slice(0, 10).map(item => `- ${item.name}: ${item.value.toLocaleString()} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`).join('\n') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}

üïê ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:
${chartData.timeData?.map(item => `- ${item.name}: ${item.value.toLocaleString()} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`).join('\n') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}

üéØ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á:
${chartData.directionData?.map(item => `- ${item.name}: ${item.value.toLocaleString()} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`).join('\n') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}

${uploadInfo}

üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û:
${uploadResult?.dataQuality ? `
- ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: ${uploadResult.dataQuality.overallScore}/100 (${uploadResult.dataQuality.rating})
- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${uploadResult.dataQuality.metrics.validPercentage}%
- ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${uploadResult.dataQuality.metrics.errorPercentage}%
- ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${uploadResult.dataQuality.metrics.warningPercentage}%
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${uploadResult.dataQuality.metrics.completenessScore}%` : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û'}

üí¨ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö AI:
${chatMessages.length > 0 ? 
  chatMessages.map(msg => `${msg.type === 'user' ? 'üë§ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°' : 'ü§ñ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö'}: ${msg.content}`).join('\n\n') : 
  '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö AI'
}

üö® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô Security Dashboard
- ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ‡∏î‡∏π‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"

üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}
- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ${logData.length.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
- ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: Enhanced Upload v2.0
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà: ‚úÖ ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 500MB, 2M records

‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
- ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Dashboard
- ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á AI Service

========================================================
‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö Access Log Analyzer (Enhanced)
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
`;

      const blob = new Blob([report], { type: 'text/plain;charset=utf-8' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `enhanced-access-log-report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      console.log('‚úÖ Enhanced report exported successfully');
    } catch (exportError) {
      console.error('‚ùå Export failed:', exportError);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      setIsLoading(false);
    }
  };

  // Tab change handler with error clearing
  const handleTabChange = (tabId) => {
    setActiveTab(tabId);
    clearError();
    
    // Analytics tracking
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'tab_change', {
        event_category: 'navigation',
        event_label: tabId,
        custom_parameters: {
          previous_tab: activeTab,
          has_upload_data: logData.length > 0,
          system_health: Object.values(systemStatus).every(status => status === 'connected')
        }
      });
    }
  };

  // Enhanced upload error handler
  const handleUploadError = (error) => {
    console.error('‚ùå Upload error in App:', error);
    setError(`‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error}`);
  };

  // System status indicator
  const getSystemStatusColor = () => {
    const connected = Object.values(systemStatus).filter(status => status === 'connected').length;
    const total = Object.keys(systemStatus).length;
    
    // In development, be more lenient
    if (process.env.NODE_ENV === 'development') {
      if (connected >= 1) return 'text-blue-500'; // Show blue for dev mode
      return 'text-yellow-500';
    }
    
    if (connected === total) return 'text-green-500';
    if (connected >= total / 2) return 'text-yellow-500';
    return 'text-red-500';
  };

  // Render main content based on active tab
  const renderContent = () => {
    try {
      switch (activeTab) {
        case 'upload':
          return (
            <UploadPage
              isUploading={isUploading}
              uploadProgress={uploadProgress}
              onFileUpload={handleFileUpload}
              logDataCount={logData.length}
              uploadError={uploadError}
            />
          );
          
        case 'dashboard':
          return (
            <DashboardPage
              filteredData={filteredData}
              stats={stats}
              chartData={chartData}
              filters={filters}
              onFilterChange={handleFilterChange}
              onExportReport={exportReport}
              isLoading={isLoading}
              onError={setError}
              uploadStats={uploadStats}
              systemStatus={systemStatus}
            />
          );
          
        case 'chat':
          return (
            <ChatPage
              chatMessages={chatMessages}
              currentMessage={currentMessage}
              setCurrentMessage={setCurrentMessage}
              onSendMessage={handleSendMessage}
              isAnalyzing={isAnalyzing}
              isAIAvailable={systemStatus.ai === 'connected'}
              onError={setError}
              logDataStats={stats}
              uploadStats={uploadStats}
            />
          );
          
        case 'analytics':
          return (
            <div className="space-y-6">
              {/* Enhanced Analytics Header */}
              <div className="bg-white rounded-lg shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h1 className="text-2xl font-bold text-gray-900 flex items-center">
                      <span className="mr-3">üõ°Ô∏è</span>
                      ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
                    </h1>
                    <p className="text-gray-600 mt-1">
                      ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
                    </p>
                  </div>
                  <div className="text-right">
                    <div className="flex items-center space-x-2 text-sm text-gray-500 mb-2">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                      <span>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå</span>
                    </div>
                    {uploadStats && (
                      <div className="text-xs text-gray-400">
                        ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {uploadStats.fileName || 'N/A'}
                      </div>
                    )}
                  </div>
                </div>

                {/* Enhanced Quick Stats */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                    <div className="flex items-center">
                      <span className="text-2xl mr-3">üìä</span>
                      <div>
                        <p className="text-sm font-medium text-blue-600">‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                        <p className="text-2xl font-bold text-blue-700">{stats.totalAccess?.toLocaleString() || 0}</p>
                        <p className="text-xs text-blue-500">
                          {uploadStats?.totalRecords && `‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ${uploadStats.totalRecords.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                    <div className="flex items-center">
                      <span className="text-2xl mr-3">‚úÖ</span>
                      <div>
                        <p className="text-sm font-medium text-green-600">‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</p>
                        <p className="text-2xl font-bold text-green-700">{stats.successfulAccess?.toLocaleString() || 0}</p>
                        <p className="text-xs text-green-500">
                          {stats.totalAccess ? `${((stats.successfulAccess/stats.totalAccess)*100).toFixed(1)}%` : '0%'}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                    <div className="flex items-center">
                      <span className="text-2xl mr-3">üö´</span>
                      <div>
                        <p className="text-sm font-medium text-red-600">‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</p>
                        <p className="text-2xl font-bold text-red-700">{stats.deniedAccess?.toLocaleString() || 0}</p>
                        <p className="text-xs text-red-500">
                          {stats.totalAccess ? `${((stats.deniedAccess/stats.totalAccess)*100).toFixed(1)}%` : '0%'}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                    <div className="flex items-center">
                      <span className="text-2xl mr-3">üë•</span>
                      <div>
                        <p className="text-sm font-medium text-purple-600">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥</p>
                        <p className="text-2xl font-bold text-purple-700">{stats.uniqueUsers?.toLocaleString() || 0}</p>
                        <p className="text-xs text-purple-500">
                          {uploadStats?.validRecords && `‡∏à‡∏≤‡∏Å ${uploadStats.validRecords.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Upload Quality Indicator */}
                {uploadStats && (
                  <div className="mt-4 p-4 bg-gradient-to-r from-blue-50 to-green-50 border border-blue-200 rounded-lg">
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium text-gray-900">‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h4>
                        <p className="text-sm text-gray-600">
                          ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {uploadStats.fileName || 'N/A'}
                        </p>
                      </div>
                      <div className="text-right">
                        <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                          uploadSuccessRate >= 90 ? 'bg-green-100 text-green-800' :
                          uploadSuccessRate >= 80 ? 'bg-blue-100 text-blue-800' :
                          uploadSuccessRate >= 70 ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          {uploadSuccessRate || 'N/A'}% ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        </div>
                        <p className="text-xs text-gray-500 mt-1">
                          ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ô {uploadStats.processingTime || 'N/A'}
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Security Components */}
              <SecurityDashboard 
                logData={logData} 
                stats={stats} 
                uploadStats={uploadStats}
                systemStatus={systemStatus}
              />
              <SecurityAlerts 
                logData={logData} 
                uploadStats={uploadStats}
              />
            </div>
          );
          
        default:
          return (
            <div className="text-center py-12">
              <span className="text-4xl mb-4 block">ü§î</span>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
              </h3>
              <p className="text-gray-600 mb-4">
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
              </p>
              <button
                onClick={() => handleTabChange('upload')}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
              </button>
            </div>
          );
      }
    } catch (renderError) {
      console.error('‚ùå Content render error:', renderError);
      return (
        <div className="text-center py-12">
          <span className="text-4xl mb-4 block">‚ùå</span>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
          </h3>
          <p className="text-gray-600 mb-4">
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
          </p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
          </button>
        </div>
      );
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <div className="max-w-7xl mx-auto px-4 py-4">
        {/* Global Error Banner */}
        {error && (
          <div className="mb-4 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <svg className="h-5 w-5 text-yellow-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                <div>
                  <p className="text-sm font-medium text-yellow-800">
                    ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                  </p>
                  <p className="text-sm text-yellow-700">
                    {error}
                  </p>
                </div>
              </div>
              <button
                onClick={clearError}
                className="text-yellow-400 hover:text-yellow-600 transition-colors"
              >
                <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
        )}

        {/* Global Loading Overlay */}
        {isLoading && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-white rounded-lg p-6 max-w-sm mx-4">
              <div className="flex items-center">
                <svg className="animate-spin h-5 w-5 text-blue-600 mr-3" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"/>
                  <path className="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                </svg>
                <span className="text-gray-900">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...</span>
              </div>
            </div>
          </div>
        )}

        {/* System Status Indicator */}
        <div className="mb-4 flex items-center justify-between">
          <NavigationTabs 
            activeTab={activeTab} 
            setActiveTab={handleTabChange}
          />
          
          {/* Enhanced System Status */}
          <div className="flex items-center space-x-4 text-sm">
            <div className="flex items-center space-x-2">
              <div className={`w-2 h-2 rounded-full ${
                systemStatus.ai === 'connected' ? 'bg-green-400' : 
                systemStatus.ai === 'checking' ? 'bg-yellow-400 animate-pulse' : 'bg-red-400'
              }`}></div>
              <span className="text-gray-600">AI</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className={`w-2 h-2 rounded-full ${
                systemStatus.database === 'connected' ? 'bg-green-400' : 
                systemStatus.database === 'checking' ? 'bg-yellow-400 animate-pulse' : 'bg-red-400'
              }`}></div>
              <span className="text-gray-600">DB</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className={`w-2 h-2 rounded-full ${
                systemStatus.upload === 'connected' ? 'bg-green-400' : 
                systemStatus.upload === 'checking' ? 'bg-yellow-400 animate-pulse' : 'bg-orange-400'
              }`}></div>
              <span className="text-gray-600">Upload</span>
            </div>
            <span className={`text-xs ${getSystemStatusColor()}`}>
              {Object.values(systemStatus).every(status => status === 'connected') ? '‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°' : 
               Object.values(systemStatus).some(status => status === 'checking') ? '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...' : 
               process.env.NODE_ENV === 'development' ? '‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤' : '‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'}
            </span>
          </div>
        </div>
        
        {/* Main Content */}
        <main role="main" aria-label="‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å">
          {renderContent()}
        </main>
      </div>

      {/* Enhanced Footer */}
      <footer className="bg-white border-t border-gray-200 mt-12">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between text-sm text-gray-500">
            <div>
              <p>¬© 2024 Access Log Analyzer Enhanced - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà</p>
              <p className="text-xs mt-1">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 500MB ‚Ä¢ 2M records ‚Ä¢ Real-time processing</p>
            </div>
            <div className="flex items-center space-x-6 text-xs">
              <span className={`flex items-center ${getSystemStatusColor()}`}>
                <div className={`w-2 h-2 rounded-full mr-2 ${
                  Object.values(systemStatus).every(status => status === 'connected') ? 'bg-green-400' : 
                  Object.values(systemStatus).some(status => status === 'checking') ? 'bg-yellow-400 animate-pulse' : 'bg-red-400'
                }`}></div>
                {Object.values(systemStatus).every(status => status === 'connected') ? '‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥' : 
                 Object.values(systemStatus).some(status => status === 'checking') ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö' : '‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'}
              </span>
              <span>üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {logData.length.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
              {uploadStats && (
                <span>üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {uploadStats.fileName || 'N/A'}</span>
              )}
              <span>üöÄ Enhanced v2.0</span>
            </div>
          </div>
          
          {/* Upload Statistics in Footer */}
          {uploadStats && uploadStats.success && (
            <div className="mt-3 pt-3 border-t border-gray-200">
              <div className="flex items-center justify-between text-xs text-gray-400">
                <span>
                  ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {uploadStats.fileName} ({uploadStats.fileSize ? `${(uploadStats.fileSize / 1024 / 1024).toFixed(2)}MB` : 'N/A'})
                </span>
                <span>
                  ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {uploadStats.processingTime || 'N/A'} ‚Ä¢ 
                  ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {uploadSuccessRate || 'N/A'}% ‚Ä¢ 
                  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {uploadStats.insertedRecords?.toLocaleString() || 'N/A'}
                </span>
              </div>
            </div>
          )}
        </div>
      </footer>
    </div>
  );
};

// Enhanced Error Boundary Component
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Error Boundary caught an error:', error, errorInfo);
    this.setState({ errorInfo });
    
    // Log to external service if available
    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'exception', {
        description: error.toString(),
        fatal: true
      });
    }
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <div className="text-center max-w-md mx-4">
            <span className="text-6xl mb-4 block">üí•</span>
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î
            </h1>
            <p className="text-gray-600 mb-4">
              ‡∏£‡∏∞‡∏ö‡∏ö Enhanced Access Log Analyzer ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            </p>
            <p className="text-sm text-gray-500 mb-6">
              ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {this.state.error?.message || 'Unknown error'}
            </p>
            <div className="flex space-x-3 justify-center">
              <button
                onClick={() => window.location.reload()}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
              </button>
              <button
                onClick={() => this.setState({ hasError: false, error: null, errorInfo: null })}
                className="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
              </button>
            </div>
            {process.env.NODE_ENV === 'development' && this.state.errorInfo && (
              <details className="mt-4 text-left">
                <summary className="cursor-pointer text-sm text-gray-500">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (Development)</summary>
                <pre className="text-xs text-gray-400 mt-2 bg-gray-100 p-2 rounded overflow-auto">
                  {this.state.error && this.state.error.toString()}
                  {this.state.errorInfo.componentStack}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

// Main App wrapper with Error Boundary
const App = () => (
  <ErrorBoundary>
    <AccessLogAnalyzer />
  </ErrorBoundary>
);

export default App;